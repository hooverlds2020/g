{"ast":null,"code":"var _jsxFileName = \"/home/editorial/Descargas/Robert/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport GameOptionsComp from \"./components/GameOptionsComp\";\nimport TowerComp from \"./components/TowerComp\";\nimport WinMessageComp from \"./components/WinMessageComp\";\nimport Tower from \"./utils/Tower\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //*Contar el numero de movimientos\n  const [moveCount, setMoveCount] = useState(0); //*El disco que se está movimiendo\n\n  const [dragTile, setDragTile] = useState(); //*Los discos para la torre principal\n\n  const [disks, setDisks] = useState(3); //*Los discos de cada torre (1, 2, 3)\n\n  const [tiles, setTiles] = useState([]);\n  const [tilesTwo, setTilesTwo] = useState([]);\n  const [tilesThree, setTilesThree] = useState([]); //*Las 3 torres (columnas)\n\n  let [towerOne, setTowerOne] = useState(new Tower());\n  let [towerTwo, setTowerTwo] = useState(new Tower());\n  let [towerThree, setTowerThree] = useState(new Tower());\n  const towers = {\n    1: {\n      tower: towerOne\n    },\n    2: {\n      tower: towerTwo\n    },\n    3: {\n      tower: towerThree\n    }\n  };\n  useEffect(() => {\n    //*Resetear las torres\n    reset(); //* eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disks]); //*Actualizar todos los discos de las torres\n  //*Esta actualización se hará con cada movimiento de las torres\n\n  useEffect(() => {\n    setTiles(towerOne.disks.traverse());\n  }, [towerOne]);\n  useEffect(() => {\n    setTilesTwo(towerTwo.disks.traverse());\n  }, [towerTwo]);\n  useEffect(() => {\n    setTilesThree(towerThree.disks.traverse());\n  }, [towerThree]);\n\n  const reset = () => {\n    //COMPLETAR\n    towerOne = new Tower();\n    towerTwo = new Tower();\n    towerThree = new Tower();\n\n    if (disks > 0) {\n      for (let i = disks; i > 0; i--) {\n        towerOne.add(i);\n      }\n    }\n\n    setTowerOne(towerOne);\n    setTowerTwo(towerTwo);\n    setTowerThree(towerThree);\n    setMoveCount(0);\n  };\n\n  const handleDrag = (e, tile, id) => {\n    const dragTile = {\n      tile,\n      towerId: id\n    };\n\n    if (towers[id].tower.disks.top === dragTile.tile) {\n      setDragTile(dragTile);\n    } else {\n      e.preventDefault();\n    }\n  };\n\n  const handleDrop = e => {\n    //*Funcion que se lanza cada vez que un disco se deja en una nueva torre\n    const dropColumn = e.currentTarget.id; //ID de la columna de destino\n\n    let source = towers[dragTile.towerId].tower; //Torre de origen\n\n    let destination = towers[dropColumn].tower; //Torre de destino\n\n    const goodMove = source.moveTopTo(destination, setMoveCount, moveCount); //Mover el disco desde la torre de origen al destino\n\n    if (goodMove) {\n      //*Si es un movimiento valido -> incrementar los movimientos\n      setMoveCount(prevState => prevState + 1); //Actualizar los movimientos\n\n      setTiles(towerOne.disks.traverse());\n      setTilesTwo(towerTwo.disks.traverse());\n      setTilesThree(towerThree.disks.traverse());\n    }\n  };\n\n  const solve = () => {\n    towerOne.setTower = setTowerOne.bind(setTowerOne);\n    towerTwo.setTower = setTowerTwo.bind(setTowerTwo);\n    towerThree.setTower = setTowerThree.bind(setTowerThree);\n    const generator = towerOne.moveDisks(disks, towerThree, towerTwo);\n\n    (async () => {\n      for (let n of generator) {\n        setMoveCount(prevState => prevState += 1);\n        await new Promise(resolve => {\n          setTimeout(() => {\n            resolve();\n          }, 700);\n        });\n      }\n    })();\n  };\n\n  const winCondition = tiles.length === 0 && tilesTwo.length === 0; //COMPLETAR\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(GameOptionsComp, {\n        disks: disks,\n        setDisks: setDisks,\n        reset: reset,\n        solve: solve\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(TowerComp, {\n          id: 1,\n          disks: tiles,\n          handleDrag: handleDrag,\n          handleDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TowerComp, {\n          id: 2,\n          disks: tilesTwo,\n          handleDrag: handleDrag,\n          handleDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TowerComp, {\n          id: 3,\n          disks: tilesThree,\n          handleDrag: handleDrag,\n          handleDrop: handleDrop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), winCondition && /*#__PURE__*/_jsxDEV(WinMessageComp, {\n        moveCount: moveCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 26\n      }, this), \"Movimientos: \", moveCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"51XsNJP8JS1iH85T/sKhjsqS9uU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","GameOptionsComp","TowerComp","WinMessageComp","Tower","App","moveCount","setMoveCount","dragTile","setDragTile","disks","setDisks","tiles","setTiles","tilesTwo","setTilesTwo","tilesThree","setTilesThree","towerOne","setTowerOne","towerTwo","setTowerTwo","towerThree","setTowerThree","towers","tower","reset","traverse","i","add","handleDrag","e","tile","id","towerId","top","preventDefault","handleDrop","dropColumn","currentTarget","source","destination","goodMove","moveTopTo","prevState","solve","setTower","bind","generator","moveDisks","n","Promise","resolve","setTimeout","winCondition","length"],"sources":["/home/editorial/Descargas/Robert/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport GameOptionsComp from \"./components/GameOptionsComp\";\r\nimport TowerComp from \"./components/TowerComp\";\r\nimport WinMessageComp from \"./components/WinMessageComp\";\r\nimport Tower from \"./utils/Tower\";\r\nimport \"./App.css\";\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n  //*Contar el numero de movimientos\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  const [moveCount, setMoveCount] = useState(0);\r\n  //*El disco que se está movimiendo\r\n  const [dragTile, setDragTile] = useState();\r\n  //*Los discos para la torre principal\r\n  const [disks, setDisks] = useState(3);\r\n\r\n  //*Los discos de cada torre (1, 2, 3)\r\n  const [tiles, setTiles] = useState([]);\r\n  const [tilesTwo, setTilesTwo] = useState([]);\r\n  const [tilesThree, setTilesThree] = useState([]);\r\n\r\n  //*Las 3 torres (columnas)\r\n  let [towerOne, setTowerOne] = useState(new Tower());\r\n  let [towerTwo, setTowerTwo] = useState(new Tower());\r\n  let [towerThree, setTowerThree] = useState(new Tower());\r\n\r\n  const towers = {\r\n    1: {\r\n      tower: towerOne,\r\n    },\r\n    2: {\r\n      tower: towerTwo,\r\n    },\r\n    3: {\r\n      tower: towerThree,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    //*Resetear las torres\r\n    reset();\r\n    //* eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [disks]);\r\n\r\n  //*Actualizar todos los discos de las torres\r\n  //*Esta actualización se hará con cada movimiento de las torres\r\n  useEffect(() => {\r\n    setTiles(towerOne.disks.traverse());\r\n  }, [towerOne]);\r\n\r\n  useEffect(() => {\r\n    setTilesTwo(towerTwo.disks.traverse());\r\n  }, [towerTwo]);\r\n\r\n  useEffect(() => {\r\n    setTilesThree(towerThree.disks.traverse());\r\n  }, [towerThree]);\r\n\r\n  const reset = () => {\r\n    //COMPLETAR\r\n    towerOne = new Tower();\r\n    towerTwo = new Tower();\r\n    towerThree = new Tower();\r\n    if (disks > 0) {\r\n      for (let i = disks; i > 0; i--) {\r\n        towerOne.add(i);\r\n      }\r\n    }\r\n    setTowerOne(towerOne);\r\n    setTowerTwo(towerTwo);\r\n    setTowerThree(towerThree);\r\n    setMoveCount(0);\r\n  };\r\n\r\n  const handleDrag = (e, tile, id) => {\r\n    const dragTile = { tile, towerId: id };\r\n    if (towers[id].tower.disks.top === dragTile.tile) {\r\n      setDragTile(dragTile);\r\n    } else {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    //*Funcion que se lanza cada vez que un disco se deja en una nueva torre\r\n    const dropColumn = e.currentTarget.id; //ID de la columna de destino\r\n    let source = towers[dragTile.towerId].tower; //Torre de origen\r\n    let destination = towers[dropColumn].tower; //Torre de destino\r\n\r\n    const goodMove = source.moveTopTo(destination, setMoveCount, moveCount); //Mover el disco desde la torre de origen al destino\r\n    if (goodMove) {\r\n      //*Si es un movimiento valido -> incrementar los movimientos\r\n\r\n      setMoveCount((prevState) => prevState + 1); //Actualizar los movimientos\r\n      setTiles(towerOne.disks.traverse());\r\n      setTilesTwo(towerTwo.disks.traverse());\r\n      setTilesThree(towerThree.disks.traverse());\r\n    }\r\n  };\r\n\r\n  const solve = () => {\r\n    towerOne.setTower = setTowerOne.bind(setTowerOne);\r\n    towerTwo.setTower = setTowerTwo.bind(setTowerTwo);\r\n    towerThree.setTower = setTowerThree.bind(setTowerThree);\r\n\r\n    const generator = towerOne.moveDisks(disks, towerThree, towerTwo);\r\n    (async () => {\r\n      for (let n of generator) {\r\n        setMoveCount((prevState) => (prevState += 1));\r\n        await new Promise((resolve) => {\r\n          setTimeout(() => {\r\n            resolve();\r\n          }, 700);\r\n        });\r\n      }\r\n    })();\r\n  };\r\n  const winCondition = tiles.length === 0 && tilesTwo.length === 0; //COMPLETAR\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <GameOptionsComp\r\n          disks={disks}\r\n          setDisks={setDisks}\r\n          reset={reset}\r\n          solve={solve}\r\n        />\r\n        <div className=\"content\">\r\n          <TowerComp\r\n            id={1}\r\n            disks={tiles}\r\n            handleDrag={handleDrag}\r\n            handleDrop={handleDrop}\r\n          />\r\n          <TowerComp\r\n            id={2}\r\n            disks={tilesTwo}\r\n            handleDrag={handleDrag}\r\n            handleDrop={handleDrop}\r\n          />\r\n          <TowerComp\r\n            id={3}\r\n            disks={tilesThree}\r\n            handleDrag={handleDrag}\r\n            handleDrop={handleDrop}\r\n          />\r\n        </div>\r\n        {winCondition && <WinMessageComp moveCount={moveCount} />}\r\n        Movimientos: {moveCount}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAO,WAAP;;;;AAKA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EAYA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C,CAbgB,CAchB;;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,EAAxC,CAfgB,CAgBhB;;EACA,MAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC,CAjBgB,CAmBhB;;EACA,MAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C,CAtBgB,CAwBhB;;EACA,IAAI,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,IAAII,KAAJ,EAAD,CAAtC;EACA,IAAI,CAACgB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,IAAII,KAAJ,EAAD,CAAtC;EACA,IAAI,CAACkB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,IAAII,KAAJ,EAAD,CAA1C;EAEA,MAAMoB,MAAM,GAAG;IACb,GAAG;MACDC,KAAK,EAAEP;IADN,CADU;IAIb,GAAG;MACDO,KAAK,EAAEL;IADN,CAJU;IAOb,GAAG;MACDK,KAAK,EAAEH;IADN;EAPU,CAAf;EAYAvB,SAAS,CAAC,MAAM;IACd;IACA2B,KAAK,GAFS,CAGd;EACD,CAJQ,EAIN,CAAChB,KAAD,CAJM,CAAT,CAzCgB,CA+ChB;EACA;;EACAX,SAAS,CAAC,MAAM;IACdc,QAAQ,CAACK,QAAQ,CAACR,KAAT,CAAeiB,QAAf,EAAD,CAAR;EACD,CAFQ,EAEN,CAACT,QAAD,CAFM,CAAT;EAIAnB,SAAS,CAAC,MAAM;IACdgB,WAAW,CAACK,QAAQ,CAACV,KAAT,CAAeiB,QAAf,EAAD,CAAX;EACD,CAFQ,EAEN,CAACP,QAAD,CAFM,CAAT;EAIArB,SAAS,CAAC,MAAM;IACdkB,aAAa,CAACK,UAAU,CAACZ,KAAX,CAAiBiB,QAAjB,EAAD,CAAb;EACD,CAFQ,EAEN,CAACL,UAAD,CAFM,CAAT;;EAIA,MAAMI,KAAK,GAAG,MAAM;IAClB;IACAR,QAAQ,GAAG,IAAId,KAAJ,EAAX;IACAgB,QAAQ,GAAG,IAAIhB,KAAJ,EAAX;IACAkB,UAAU,GAAG,IAAIlB,KAAJ,EAAb;;IACA,IAAIM,KAAK,GAAG,CAAZ,EAAe;MACb,KAAK,IAAIkB,CAAC,GAAGlB,KAAb,EAAoBkB,CAAC,GAAG,CAAxB,EAA2BA,CAAC,EAA5B,EAAgC;QAC9BV,QAAQ,CAACW,GAAT,CAAaD,CAAb;MACD;IACF;;IACDT,WAAW,CAACD,QAAD,CAAX;IACAG,WAAW,CAACD,QAAD,CAAX;IACAG,aAAa,CAACD,UAAD,CAAb;IACAf,YAAY,CAAC,CAAD,CAAZ;EACD,CAdD;;EAgBA,MAAMuB,UAAU,GAAG,CAACC,CAAD,EAAIC,IAAJ,EAAUC,EAAV,KAAiB;IAClC,MAAMzB,QAAQ,GAAG;MAAEwB,IAAF;MAAQE,OAAO,EAAED;IAAjB,CAAjB;;IACA,IAAIT,MAAM,CAACS,EAAD,CAAN,CAAWR,KAAX,CAAiBf,KAAjB,CAAuByB,GAAvB,KAA+B3B,QAAQ,CAACwB,IAA5C,EAAkD;MAChDvB,WAAW,CAACD,QAAD,CAAX;IACD,CAFD,MAEO;MACLuB,CAAC,CAACK,cAAF;IACD;EACF,CAPD;;EASA,MAAMC,UAAU,GAAIN,CAAD,IAAO;IACxB;IACA,MAAMO,UAAU,GAAGP,CAAC,CAACQ,aAAF,CAAgBN,EAAnC,CAFwB,CAEe;;IACvC,IAAIO,MAAM,GAAGhB,MAAM,CAAChB,QAAQ,CAAC0B,OAAV,CAAN,CAAyBT,KAAtC,CAHwB,CAGqB;;IAC7C,IAAIgB,WAAW,GAAGjB,MAAM,CAACc,UAAD,CAAN,CAAmBb,KAArC,CAJwB,CAIoB;;IAE5C,MAAMiB,QAAQ,GAAGF,MAAM,CAACG,SAAP,CAAiBF,WAAjB,EAA8BlC,YAA9B,EAA4CD,SAA5C,CAAjB,CANwB,CAMiD;;IACzE,IAAIoC,QAAJ,EAAc;MACZ;MAEAnC,YAAY,CAAEqC,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAZ,CAHY,CAGgC;;MAC5C/B,QAAQ,CAACK,QAAQ,CAACR,KAAT,CAAeiB,QAAf,EAAD,CAAR;MACAZ,WAAW,CAACK,QAAQ,CAACV,KAAT,CAAeiB,QAAf,EAAD,CAAX;MACAV,aAAa,CAACK,UAAU,CAACZ,KAAX,CAAiBiB,QAAjB,EAAD,CAAb;IACD;EACF,CAfD;;EAiBA,MAAMkB,KAAK,GAAG,MAAM;IAClB3B,QAAQ,CAAC4B,QAAT,GAAoB3B,WAAW,CAAC4B,IAAZ,CAAiB5B,WAAjB,CAApB;IACAC,QAAQ,CAAC0B,QAAT,GAAoBzB,WAAW,CAAC0B,IAAZ,CAAiB1B,WAAjB,CAApB;IACAC,UAAU,CAACwB,QAAX,GAAsBvB,aAAa,CAACwB,IAAd,CAAmBxB,aAAnB,CAAtB;IAEA,MAAMyB,SAAS,GAAG9B,QAAQ,CAAC+B,SAAT,CAAmBvC,KAAnB,EAA0BY,UAA1B,EAAsCF,QAAtC,CAAlB;;IACA,CAAC,YAAY;MACX,KAAK,IAAI8B,CAAT,IAAcF,SAAd,EAAyB;QACvBzC,YAAY,CAAEqC,SAAD,IAAgBA,SAAS,IAAI,CAA9B,CAAZ;QACA,MAAM,IAAIO,OAAJ,CAAaC,OAAD,IAAa;UAC7BC,UAAU,CAAC,MAAM;YACfD,OAAO;UACR,CAFS,EAEP,GAFO,CAAV;QAGD,CAJK,CAAN;MAKD;IACF,CATD;EAUD,CAhBD;;EAiBA,MAAME,YAAY,GAAG1C,KAAK,CAAC2C,MAAN,KAAiB,CAAjB,IAAsBzC,QAAQ,CAACyC,MAAT,KAAoB,CAA/D,CAxHgB,CAwHkD;;EAElE,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE,QAAC,eAAD;QACE,KAAK,EAAE7C,KADT;QAEE,QAAQ,EAAEC,QAFZ;QAGE,KAAK,EAAEe,KAHT;QAIE,KAAK,EAAEmB;MAJT;QAAA;QAAA;QAAA;MAAA,QADF,eAOE;QAAK,SAAS,EAAC,SAAf;QAAA,wBACE,QAAC,SAAD;UACE,EAAE,EAAE,CADN;UAEE,KAAK,EAAEjC,KAFT;UAGE,UAAU,EAAEkB,UAHd;UAIE,UAAU,EAAEO;QAJd;UAAA;UAAA;UAAA;QAAA,QADF,eAOE,QAAC,SAAD;UACE,EAAE,EAAE,CADN;UAEE,KAAK,EAAEvB,QAFT;UAGE,UAAU,EAAEgB,UAHd;UAIE,UAAU,EAAEO;QAJd;UAAA;UAAA;UAAA;QAAA,QAPF,eAaE,QAAC,SAAD;UACE,EAAE,EAAE,CADN;UAEE,KAAK,EAAErB,UAFT;UAGE,UAAU,EAAEc,UAHd;UAIE,UAAU,EAAEO;QAJd;UAAA;UAAA;UAAA;QAAA,QAbF;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF,EA2BGiB,YAAY,iBAAI,QAAC,cAAD;QAAgB,SAAS,EAAEhD;MAA3B;QAAA;QAAA;QAAA;MAAA,QA3BnB,mBA4BgBA,SA5BhB;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAkCD,CA5JD;;GAAMD,G;;KAAAA,G;AA8JN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}