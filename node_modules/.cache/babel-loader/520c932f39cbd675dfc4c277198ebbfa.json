{"ast":null,"code":"import Stack from \"./Stack\";\nimport deepCopy from \"../helpers/deepCopy\";\n\nclass Tower {\n  constructor(maxLength) {\n    this.disks = new Stack();\n  }\n\n  add(value) {\n    //this.disks.push(value);\n    //this.length++;\n    //return this;\n    //Un valor nuevo en una torre debe ser menor al valor existente en la cabeza\n    if (this.disks.isEmpty() || value < this.disks.top.value) {\n      this.disks.push(value);\n    }\n\n    return this;\n  }\n\n  moveTopTo(destination) {\n    if (destination.add(this.disks.top.value)) {\n      this.disks.pop();\n      destination.setTower(deepCopy(destination));\n      this.setTower(deepCopy(this));\n      return this;\n    } else {\n      return false;\n    }\n  }\n\n  *moveDisks(disks, towerDestination, towerAux) {\n    if (disks === 0) {\n      return true;\n    }\n\n    if (disks === 1) {\n      yield this.moveTopTo(towerDestination);\n    }\n\n    if (disks >= 2) {\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\n      yield this.moveTopTo(towerDestination);\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\n    }\n\n    return true;\n  }\n\n}\n\nexport default Tower;","map":{"version":3,"names":["Stack","deepCopy","Tower","constructor","maxLength","disks","add","value","isEmpty","top","push","moveTopTo","destination","pop","setTower","moveDisks","towerDestination","towerAux"],"sources":["/home/editorial/Descargas/Robert/src/utils/Tower.js"],"sourcesContent":["import Stack from \"./Stack\";\r\nimport deepCopy from \"../helpers/deepCopy\";\r\n\r\nclass Tower {\r\n  constructor(maxLength) {    \r\n    this.disks = new Stack();\r\n  }\r\n  add(value) {\r\n    //this.disks.push(value);\r\n    //this.length++;\r\n    //return this;\r\n\r\n    //Un valor nuevo en una torre debe ser menor al valor existente en la cabeza\r\n    if (this.disks.isEmpty() || value < this.disks.top.value) {\r\n      this.disks.push(value);\r\n  }\r\n  return this\r\n}\r\n\r\n  moveTopTo(destination) {\r\n    if (destination.add(this.disks.top.value)) {\r\n      this.disks.pop();\r\n      destination.setTower(deepCopy(destination));\r\n      this.setTower(deepCopy(this));\r\n      return this;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  *moveDisks(disks, towerDestination, towerAux) {\r\n    if (disks === 0) {\r\n      return true;\r\n    }\r\n    if (disks === 1) {\r\n      yield this.moveTopTo(towerDestination);\r\n    }\r\n    if (disks >= 2) {\r\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\r\n      yield this.moveTopTo(towerDestination);\r\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Tower;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,KAAN,CAAY;EACVC,WAAW,CAACC,SAAD,EAAY;IACrB,KAAKC,KAAL,GAAa,IAAIL,KAAJ,EAAb;EACD;;EACDM,GAAG,CAACC,KAAD,EAAQ;IACT;IACA;IACA;IAEA;IACA,IAAI,KAAKF,KAAL,CAAWG,OAAX,MAAwBD,KAAK,GAAG,KAAKF,KAAL,CAAWI,GAAX,CAAeF,KAAnD,EAA0D;MACxD,KAAKF,KAAL,CAAWK,IAAX,CAAgBH,KAAhB;IACH;;IACD,OAAO,IAAP;EACD;;EAECI,SAAS,CAACC,WAAD,EAAc;IACrB,IAAIA,WAAW,CAACN,GAAZ,CAAgB,KAAKD,KAAL,CAAWI,GAAX,CAAeF,KAA/B,CAAJ,EAA2C;MACzC,KAAKF,KAAL,CAAWQ,GAAX;MACAD,WAAW,CAACE,QAAZ,CAAqBb,QAAQ,CAACW,WAAD,CAA7B;MACA,KAAKE,QAAL,CAAcb,QAAQ,CAAC,IAAD,CAAtB;MACA,OAAO,IAAP;IACD,CALD,MAKO;MACL,OAAO,KAAP;IACD;EACF;;EAES,CAATc,SAAS,CAACV,KAAD,EAAQW,gBAAR,EAA0BC,QAA1B,EAAoC;IAC5C,IAAIZ,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO,IAAP;IACD;;IACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;MACf,MAAM,KAAKM,SAAL,CAAeK,gBAAf,CAAN;IACD;;IACD,IAAIX,KAAK,IAAI,CAAb,EAAgB;MACd,OAAO,KAAKU,SAAL,CAAeV,KAAK,GAAG,CAAvB,EAA0BY,QAA1B,EAAoCD,gBAApC,CAAP;MACA,MAAM,KAAKL,SAAL,CAAeK,gBAAf,CAAN;MACA,OAAOC,QAAQ,CAACF,SAAT,CAAmBV,KAAK,GAAG,CAA3B,EAA8BW,gBAA9B,EAAgD,IAAhD,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;AAxCS;;AA2CZ,eAAed,KAAf"},"metadata":{},"sourceType":"module"}