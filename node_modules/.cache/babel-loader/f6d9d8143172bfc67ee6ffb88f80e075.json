{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.id = `Tile-${value}`;\n    this.value = value;\n    this.width = 2 * value;\n    this.next = null;\n  }\n\n}\n\nclass Stack {\n  constructor() {\n    this.top = null;\n    this.bottom = null;\n    this.size = 0;\n  }\n\n  push(value) {\n    let newNode = new Node(value); //Agregar el elemento solamente si la pila aún no está llena\n\n    if (this.size !== this.maxSize && !this.top) {\n      //Podemos agregar el elemento en la pila\n      this.top = newNode;\n    } else if (this.size !== this.maxSize && this.top) {\n      newNode.next = this.top;\n      this.top = newNode;\n    } else {\n      return console.log('Error: la pila está llena');\n    }\n\n    this.size++;\n    return this;\n  }\n\n  peek() {\n    if (!this.top) {\n      return null;\n    }\n\n    return this.top.value;\n  }\n\n  pop() {\n    //1. Cuando no nos queden elementos en nuestra estructura de datos\n    if (this.size === 0) {\n      return null;\n    } //2. Cuando tengamos elementos en nuestra estructura de datos\n\n\n    const topNode = this.top;\n    this.top = this.top.next;\n    this.size--;\n    return topNode;\n  }\n\n  traverse() {\n    //Obtener una lista con todos los nodos de la pila\n    let currentNode = this.top;\n    let list = [];\n\n    while (currentNode) {\n      let tempNode = Object.assign({}, currentNode);\n      tempNode.next = null;\n      list.push(tempNode);\n      currentNode = currentNode.next;\n    }\n\n    return list;\n  }\n\n}\n\nexport default Stack;","map":{"version":3,"names":["Node","constructor","value","id","width","next","Stack","top","bottom","size","push","newNode","maxSize","console","log","peek","pop","topNode","traverse","currentNode","list","tempNode","Object","assign"],"sources":["/home/editorial/Descargas/Robert/src/utils/Stack.js"],"sourcesContent":["class Node {\r\n  constructor(value) {\r\n    this.id = `Tile-${value}`;\r\n    this.value = value;\r\n    this.width = 2 * value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass Stack {\r\n  constructor() {\r\n    this.top = null;\r\n    this.bottom = null;    \r\n    this.size = 0;\r\n  }\r\n\r\n  push(value) {\r\n    let newNode = new Node(value);\r\n    //Agregar el elemento solamente si la pila aún no está llena\r\n    if (this.size !== this.maxSize && !this.top) {\r\n      //Podemos agregar el elemento en la pila\r\n      this.top = newNode;\r\n    } else if (this.size !== this.maxSize && this.top) {\r\n      newNode.next = this.top;\r\n      this.top = newNode;\r\n    } else {\r\n      return console.log('Error: la pila está llena');\r\n    }\r\n    this.size++;\r\n    return this;\r\n  }\r\n  \r\n  peek() {\r\n    if(!this.top){\r\n      return null\r\n    }\r\n      return this.top.value\r\n  }\r\n\r\n  pop() {\r\n    //1. Cuando no nos queden elementos en nuestra estructura de datos\r\n    if (this.size === 0) {\r\n      return null;\r\n    }\r\n    //2. Cuando tengamos elementos en nuestra estructura de datos\r\n    const topNode = this.top;\r\n    this.top = this.top.next;\r\n    this.size--;\r\n    return topNode;\r\n  }\r\n\r\n  traverse() {\r\n    //Obtener una lista con todos los nodos de la pila\r\n    let currentNode = this.top;\r\n    let list = [];\r\n    while (currentNode) {\r\n      let tempNode = Object.assign({}, currentNode);\r\n      tempNode.next = null;\r\n      list.push(tempNode);\r\n      currentNode = currentNode.next;\r\n    }\r\n    return list;\r\n  }\r\n}\r\n\r\nexport default Stack;\r\n"],"mappings":"AAAA,MAAMA,IAAN,CAAW;EACTC,WAAW,CAACC,KAAD,EAAQ;IACjB,KAAKC,EAAL,GAAW,QAAOD,KAAM,EAAxB;IACA,KAAKA,KAAL,GAAaA,KAAb;IACA,KAAKE,KAAL,GAAa,IAAIF,KAAjB;IACA,KAAKG,IAAL,GAAY,IAAZ;EACD;;AANQ;;AASX,MAAMC,KAAN,CAAY;EACVL,WAAW,GAAG;IACZ,KAAKM,GAAL,GAAW,IAAX;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,IAAL,GAAY,CAAZ;EACD;;EAEDC,IAAI,CAACR,KAAD,EAAQ;IACV,IAAIS,OAAO,GAAG,IAAIX,IAAJ,CAASE,KAAT,CAAd,CADU,CAEV;;IACA,IAAI,KAAKO,IAAL,KAAc,KAAKG,OAAnB,IAA8B,CAAC,KAAKL,GAAxC,EAA6C;MAC3C;MACA,KAAKA,GAAL,GAAWI,OAAX;IACD,CAHD,MAGO,IAAI,KAAKF,IAAL,KAAc,KAAKG,OAAnB,IAA8B,KAAKL,GAAvC,EAA4C;MACjDI,OAAO,CAACN,IAAR,GAAe,KAAKE,GAApB;MACA,KAAKA,GAAL,GAAWI,OAAX;IACD,CAHM,MAGA;MACL,OAAOE,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAP;IACD;;IACD,KAAKL,IAAL;IACA,OAAO,IAAP;EACD;;EAEDM,IAAI,GAAG;IACL,IAAG,CAAC,KAAKR,GAAT,EAAa;MACX,OAAO,IAAP;IACD;;IACC,OAAO,KAAKA,GAAL,CAASL,KAAhB;EACH;;EAEDc,GAAG,GAAG;IACJ;IACA,IAAI,KAAKP,IAAL,KAAc,CAAlB,EAAqB;MACnB,OAAO,IAAP;IACD,CAJG,CAKJ;;;IACA,MAAMQ,OAAO,GAAG,KAAKV,GAArB;IACA,KAAKA,GAAL,GAAW,KAAKA,GAAL,CAASF,IAApB;IACA,KAAKI,IAAL;IACA,OAAOQ,OAAP;EACD;;EAEDC,QAAQ,GAAG;IACT;IACA,IAAIC,WAAW,GAAG,KAAKZ,GAAvB;IACA,IAAIa,IAAI,GAAG,EAAX;;IACA,OAAOD,WAAP,EAAoB;MAClB,IAAIE,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,WAAlB,CAAf;MACAE,QAAQ,CAAChB,IAAT,GAAgB,IAAhB;MACAe,IAAI,CAACV,IAAL,CAAUW,QAAV;MACAF,WAAW,GAAGA,WAAW,CAACd,IAA1B;IACD;;IACD,OAAOe,IAAP;EACD;;AArDS;;AAwDZ,eAAed,KAAf"},"metadata":{},"sourceType":"module"}