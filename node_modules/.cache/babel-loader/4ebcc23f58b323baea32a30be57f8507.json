{"ast":null,"code":"import Stack from \"./Stack\";\nimport deepCopy from \"../helpers/deepCopy\";\n\nclass Tower {\n  constructor() {\n    this.disks = new Stack();\n  }\n\n  add(disk) {\n    this.disks.push(disk);\n    this.length++;\n    return this; //if (this.stack.isEmpty() || disk < this.stack.top.value) {\n    //this.stack.push(disk);\n    //}\n  }\n  /*moveTopTo(destination) {\r\n    if (destination.add(this.disks.top.value)) {\r\n      this.disks.pop();\r\n      destination.setTower(deepCopy(destination));\r\n      this.setTower(deepCopy(this));\r\n      return this;\r\n    } else {\r\n      return false;\r\n    }\r\n  }*/\n\n\n  moveTopTo(destination) {\n    //mover el disco que se encuentra en top\n    //hacia la torre destino\n    if (this.disks.top !== null) {\n      let disk = this.disks.top.value;\n      destination.setTower(deepCopy(destination));\n      this.disks.pop();\n      this.setTower(deepCopy(this));\n      destination.add(disk);\n      return this; //Quitamos el disco que se encuentra en top\n    }\n  }\n\n  *moveDisks(disks, towerDestination, towerAux) {\n    if (disks === 0) {\n      return true;\n    }\n\n    if (disks === 1) {\n      this.moveTopTo(destinationTower);\n    }\n\n    if (disks >= 2) {\n      this.moveDisks(disks - 1, auxiliaryTower, destinationTower);\n      this.moveTopTo(destinationTower);\n      auxiliaryTower.moveDisks(disks - 1, destinationTower, this);\n    }\n\n    return true;\n  }\n\n}\n\nexport default Tower;","map":{"version":3,"names":["Stack","deepCopy","Tower","constructor","disks","add","disk","push","length","moveTopTo","destination","top","value","setTower","pop","moveDisks","towerDestination","towerAux","destinationTower","auxiliaryTower"],"sources":["/home/editorial/Descargas/Robert/src/utils/Tower.js"],"sourcesContent":["import Stack from \"./Stack\";\r\nimport deepCopy from \"../helpers/deepCopy\";\r\n\r\nclass Tower {\r\n  constructor() {    \r\n    this.disks = new Stack();\r\n  }\r\n  add(disk) {\r\n    this.disks.push(disk);\r\n    this.length++;\r\n    return this;   \r\n    \r\n    //if (this.stack.isEmpty() || disk < this.stack.top.value) {\r\n      //this.stack.push(disk);\r\n    //}\r\n    \r\n  }\r\n\r\n  /*moveTopTo(destination) {\r\n    if (destination.add(this.disks.top.value)) {\r\n      this.disks.pop();\r\n      destination.setTower(deepCopy(destination));\r\n      this.setTower(deepCopy(this));\r\n      return this;\r\n    } else {\r\n      return false;\r\n    }\r\n  }*/\r\n\r\n  moveTopTo(destination) {\r\n    //mover el disco que se encuentra en top\r\n    //hacia la torre destino\r\n    if (this.disks.top !== null) {\r\n      let disk = this.disks.top.value;\r\n      destination.setTower(deepCopy(destination))\r\n      this.disks.pop();\r\n      this.setTower(deepCopy(this));      \r\n      destination.add(disk);\r\n      return this; //Quitamos el disco que se encuentra en top\r\n    }\r\n  }\r\n\r\n\r\n  *moveDisks(disks, towerDestination, towerAux) {\r\n    if (disks === 0) {\r\n      return true;\r\n    }\r\n    if (disks === 1) {\r\n      this.moveTopTo(destinationTower);\r\n    }\r\n    if (disks >= 2) {\r\n      this.moveDisks(disks - 1, auxiliaryTower, destinationTower);\r\n      this.moveTopTo(destinationTower);\r\n      auxiliaryTower.moveDisks(disks - 1, destinationTower, this);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Tower;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,KAAN,CAAY;EACVC,WAAW,GAAG;IACZ,KAAKC,KAAL,GAAa,IAAIJ,KAAJ,EAAb;EACD;;EACDK,GAAG,CAACC,IAAD,EAAO;IACR,KAAKF,KAAL,CAAWG,IAAX,CAAgBD,IAAhB;IACA,KAAKE,MAAL;IACA,OAAO,IAAP,CAHQ,CAKR;IACE;IACF;EAED;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEEC,SAAS,CAACC,WAAD,EAAc;IACrB;IACA;IACA,IAAI,KAAKN,KAAL,CAAWO,GAAX,KAAmB,IAAvB,EAA6B;MAC3B,IAAIL,IAAI,GAAG,KAAKF,KAAL,CAAWO,GAAX,CAAeC,KAA1B;MACAF,WAAW,CAACG,QAAZ,CAAqBZ,QAAQ,CAACS,WAAD,CAA7B;MACA,KAAKN,KAAL,CAAWU,GAAX;MACA,KAAKD,QAAL,CAAcZ,QAAQ,CAAC,IAAD,CAAtB;MACAS,WAAW,CAACL,GAAZ,CAAgBC,IAAhB;MACA,OAAO,IAAP,CAN2B,CAMd;IACd;EACF;;EAGS,CAATS,SAAS,CAACX,KAAD,EAAQY,gBAAR,EAA0BC,QAA1B,EAAoC;IAC5C,IAAIb,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO,IAAP;IACD;;IACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;MACf,KAAKK,SAAL,CAAeS,gBAAf;IACD;;IACD,IAAId,KAAK,IAAI,CAAb,EAAgB;MACd,KAAKW,SAAL,CAAeX,KAAK,GAAG,CAAvB,EAA0Be,cAA1B,EAA0CD,gBAA1C;MACA,KAAKT,SAAL,CAAeS,gBAAf;MACAC,cAAc,CAACJ,SAAf,CAAyBX,KAAK,GAAG,CAAjC,EAAoCc,gBAApC,EAAsD,IAAtD;IACD;;IACD,OAAO,IAAP;EACD;;AArDS;;AAwDZ,eAAehB,KAAf"},"metadata":{},"sourceType":"module"}