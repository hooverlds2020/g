{"ast":null,"code":"import Stack from \"./Stack\";\nimport deepCopy from \"../helpers/deepCopy\";\n\nclass Tower {\n  constructor(length) {\n    //¿Cuáles son las propiedades/atributos?\n    this.maxSize = length;\n    this.size = 0;\n    this.stack = new Stack(length); //Almacen de discos\n  }\n\n  add(disk) {\n    //Un valor nuevo en una torre debe ser menor al valor existente en la cabeza\n    if (this.stack.isEmpty() || disk < this.stack.top.disk) {\n      this.stack.push(disk);\n    }\n  }\n\n  moveTopTo(destinationTower) {\n    //mover el disco que se encuentra en top\n    //hacia la torre destino\n    //console.log(\"Robert\", tower1.stack.top)\n    if (destinationTower.add(this.stack.top.disk)) {\n      this.stack.pop();\n      destinationTower.setTower(deepCopy(destinationTower));\n      this.setTower(deepCopy(this));\n      return this;\n    } else {\n      return false; //if (this.stack.top !== null) {\n      //let disk = this.stack.top.value;\n      //this.stacsetTowerlse;\n    }\n  }\n\n  *moveDisks(disks, towerDestination, towerAux) {\n    if (disks === 0) {\n      return true;\n    }\n\n    if (disks === 1) {\n      yield this.moveTopTo(towerDestination);\n    }\n\n    if (disks >= 2) {\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\n      yield this.moveTopTo(towerDestination);\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\n    }\n\n    return true;\n  }\n\n} //  const tower1 = new Tower(3);\n//  const tower2 = new Tower(3);\n//  const tower3 = new Tower(3);\n//  tower1.add(3);\n//  tower1.add(2);\n//  tower1.add(1);\n//  tower1.moveTopTo(tower3);\n//  tower1.moveTopTo(tower2);\n//  tower3.moveTopTo(tower2);\n//  tower1.moveTopTo(tower3);\n//  tower2.moveTopTo(tower1);\n//  tower2.moveTopTo(tower3);\n//  tower1.moveTopTo(tower3);\n//  console.log('tower 1', tower1.stack.traverse());\n//x console.log('tower 2', tower2.stack.traverse());\n//  console.log('tower 3', tower3.stack.traverse());\n//  //implementando recursividad\n//  if(n)\n//console.log(tower3.stack.top)\n// tower2.add(3);\n//console.log('tower 2', tower2.stack.traverse());\n\n\nexport default Tower;","map":{"version":3,"names":["Stack","deepCopy","Tower","constructor","length","maxSize","size","stack","add","disk","isEmpty","top","push","moveTopTo","destinationTower","pop","setTower","moveDisks","disks","towerDestination","towerAux"],"sources":["/home/editorial/Descargas/Robert/src/utils/Tower.js"],"sourcesContent":["import Stack from \"./Stack\";\r\nimport deepCopy from \"../helpers/deepCopy\";\r\n\r\nclass Tower {\r\n  constructor(length) {\r\n    //¿Cuáles son las propiedades/atributos?\r\n    this.maxSize = length\r\n    this.size = 0\r\n    this.stack = new Stack(length); //Almacen de discos\r\n  }\r\n\r\n  add(disk) {\r\n    //Un valor nuevo en una torre debe ser menor al valor existente en la cabeza\r\n    if (this.stack.isEmpty() || disk < this.stack.top.disk) {\r\n      this.stack.push(disk);\r\n    }\r\n  }\r\n  \r\n  moveTopTo(destinationTower) {\r\n    //mover el disco que se encuentra en top\r\n    //hacia la torre destino\r\n    \r\n    //console.log(\"Robert\", tower1.stack.top)\r\n\r\n    if (destinationTower.add(this.stack.top.disk)) {\r\n      this.stack.pop()\r\n      destinationTower.setTower(deepCopy(destinationTower))\r\n      this.setTower(deepCopy(this))\r\n      return this\r\n    }else{\r\n     return false    \r\n     //if (this.stack.top !== null) {\r\n      //let disk = this.stack.top.value;\r\n      //this.stacsetTowerlse;\r\n    }\r\n  }\r\n  \r\n  *moveDisks(disks, towerDestination, towerAux) {\r\n    if (disks === 0) {\r\n      return true;\r\n    }\r\n    if (disks === 1) {\r\n      yield this.moveTopTo(towerDestination);\r\n    }\r\n    if (disks >= 2) {\r\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\r\n      yield this.moveTopTo(towerDestination);\r\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\r\n    }\r\n    return true;\r\n  }\r\n} \r\n//  const tower1 = new Tower(3);\r\n//  const tower2 = new Tower(3);\r\n//  const tower3 = new Tower(3);\r\n  \r\n//  tower1.add(3);\r\n//  tower1.add(2);\r\n//  tower1.add(1);\r\n//  tower1.moveTopTo(tower3);\r\n//  tower1.moveTopTo(tower2);\r\n//  tower3.moveTopTo(tower2);\r\n//  tower1.moveTopTo(tower3);\r\n//  tower2.moveTopTo(tower1);\r\n//  tower2.moveTopTo(tower3);\r\n//  tower1.moveTopTo(tower3);\r\n  \r\n//  console.log('tower 1', tower1.stack.traverse());\r\n//x console.log('tower 2', tower2.stack.traverse());\r\n//  console.log('tower 3', tower3.stack.traverse());\r\n  \r\n//  //implementando recursividad\r\n//  if(n)\r\n  \r\n  \r\n  //console.log(tower3.stack.top)\r\n  \r\n  // tower2.add(3);\r\n\r\n//console.log('tower 2', tower2.stack.traverse());\r\n\r\nexport default Tower;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,KAAN,CAAY;EACVC,WAAW,CAACC,MAAD,EAAS;IAClB;IACA,KAAKC,OAAL,GAAeD,MAAf;IACA,KAAKE,IAAL,GAAY,CAAZ;IACA,KAAKC,KAAL,GAAa,IAAIP,KAAJ,CAAUI,MAAV,CAAb,CAJkB,CAIc;EACjC;;EAEDI,GAAG,CAACC,IAAD,EAAO;IACR;IACA,IAAI,KAAKF,KAAL,CAAWG,OAAX,MAAwBD,IAAI,GAAG,KAAKF,KAAL,CAAWI,GAAX,CAAeF,IAAlD,EAAwD;MACtD,KAAKF,KAAL,CAAWK,IAAX,CAAgBH,IAAhB;IACD;EACF;;EAEDI,SAAS,CAACC,gBAAD,EAAmB;IAC1B;IACA;IAEA;IAEA,IAAIA,gBAAgB,CAACN,GAAjB,CAAqB,KAAKD,KAAL,CAAWI,GAAX,CAAeF,IAApC,CAAJ,EAA+C;MAC7C,KAAKF,KAAL,CAAWQ,GAAX;MACAD,gBAAgB,CAACE,QAAjB,CAA0Bf,QAAQ,CAACa,gBAAD,CAAlC;MACA,KAAKE,QAAL,CAAcf,QAAQ,CAAC,IAAD,CAAtB;MACA,OAAO,IAAP;IACD,CALD,MAKK;MACJ,OAAO,KAAP,CADI,CAEJ;MACC;MACA;IACD;EACF;;EAES,CAATgB,SAAS,CAACC,KAAD,EAAQC,gBAAR,EAA0BC,QAA1B,EAAoC;IAC5C,IAAIF,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO,IAAP;IACD;;IACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;MACf,MAAM,KAAKL,SAAL,CAAeM,gBAAf,CAAN;IACD;;IACD,IAAID,KAAK,IAAI,CAAb,EAAgB;MACd,OAAO,KAAKD,SAAL,CAAeC,KAAK,GAAG,CAAvB,EAA0BE,QAA1B,EAAoCD,gBAApC,CAAP;MACA,MAAM,KAAKN,SAAL,CAAeM,gBAAf,CAAN;MACA,OAAOC,QAAQ,CAACH,SAAT,CAAmBC,KAAK,GAAG,CAA3B,EAA8BC,gBAA9B,EAAgD,IAAhD,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;AA/CS,C,CAiDZ;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGE;AAEA;AAEF;;;AAEA,eAAejB,KAAf"},"metadata":{},"sourceType":"module"}