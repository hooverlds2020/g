{"ast":null,"code":"import Stack from \"./Stack\";\nimport deepCopy from \"../helpers/deepCopy\";\n\nclass Tower {\n  constructor(maxLength) {\n    this.disks = new Stack();\n  }\n\n  add(disk) {\n    this.disks.push(disk);\n    this.length++;\n    return this;\n  }\n\n  moveTopTo(destination) {\n    if (destination.add(this.disks.top.value)) {\n      this.disks.pop();\n      destination.setTower(deepCopy(destination));\n      this.setTower(deepCopy(this));\n      return this;\n    } else {\n      return false;\n    }\n  }\n\n  *moveDisks(disks, towerDestination, towerAux) {\n    if (disks === 0) {\n      return true;\n    }\n\n    if (disks === 1) {\n      yield this.moveTopTo(towerDestination);\n    }\n\n    if (disks >= 2) {\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\n      yield this.moveTopTo(towerDestination);\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\n    }\n\n    return true;\n  }\n\n}\n\nexport default Tower;","map":{"version":3,"names":["Stack","deepCopy","Tower","constructor","maxLength","disks","add","disk","push","length","moveTopTo","destination","top","value","pop","setTower","moveDisks","towerDestination","towerAux"],"sources":["/home/editorial/Descargas/Robert/src/utils/Tower.js"],"sourcesContent":["import Stack from \"./Stack\";\r\nimport deepCopy from \"../helpers/deepCopy\";\r\n\r\nclass Tower {\r\n  constructor(maxLength) {    \r\n    this.disks = new Stack();\r\n  }\r\n  add(disk) {\r\n    this.disks.push(disk);\r\n    this.length++;\r\n    return this;   \r\n    \r\n    \r\n  }\r\n\r\n  moveTopTo(destination) {\r\n    if (destination.add(this.disks.top.value)) {\r\n      this.disks.pop();\r\n      destination.setTower(deepCopy(destination));\r\n      this.setTower(deepCopy(this));\r\n      return this;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  *moveDisks(disks, towerDestination, towerAux) {\r\n    if (disks === 0) {\r\n      return true;\r\n    }\r\n    if (disks === 1) {\r\n      yield this.moveTopTo(towerDestination);\r\n    }\r\n    if (disks >= 2) {\r\n      yield* this.moveDisks(disks - 1, towerAux, towerDestination);\r\n      yield this.moveTopTo(towerDestination);\r\n      yield* towerAux.moveDisks(disks - 1, towerDestination, this);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\nexport default Tower;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,KAAN,CAAY;EACVC,WAAW,CAACC,SAAD,EAAY;IACrB,KAAKC,KAAL,GAAa,IAAIL,KAAJ,EAAb;EACD;;EACDM,GAAG,CAACC,IAAD,EAAO;IACR,KAAKF,KAAL,CAAWG,IAAX,CAAgBD,IAAhB;IACA,KAAKE,MAAL;IACA,OAAO,IAAP;EAGD;;EAEDC,SAAS,CAACC,WAAD,EAAc;IACrB,IAAIA,WAAW,CAACL,GAAZ,CAAgB,KAAKD,KAAL,CAAWO,GAAX,CAAeC,KAA/B,CAAJ,EAA2C;MACzC,KAAKR,KAAL,CAAWS,GAAX;MACAH,WAAW,CAACI,QAAZ,CAAqBd,QAAQ,CAACU,WAAD,CAA7B;MACA,KAAKI,QAAL,CAAcd,QAAQ,CAAC,IAAD,CAAtB;MACA,OAAO,IAAP;IACD,CALD,MAKO;MACL,OAAO,KAAP;IACD;EACF;;EAES,CAATe,SAAS,CAACX,KAAD,EAAQY,gBAAR,EAA0BC,QAA1B,EAAoC;IAC5C,IAAIb,KAAK,KAAK,CAAd,EAAiB;MACf,OAAO,IAAP;IACD;;IACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;MACf,MAAM,KAAKK,SAAL,CAAeO,gBAAf,CAAN;IACD;;IACD,IAAIZ,KAAK,IAAI,CAAb,EAAgB;MACd,OAAO,KAAKW,SAAL,CAAeX,KAAK,GAAG,CAAvB,EAA0Ba,QAA1B,EAAoCD,gBAApC,CAAP;MACA,MAAM,KAAKP,SAAL,CAAeO,gBAAf,CAAN;MACA,OAAOC,QAAQ,CAACF,SAAT,CAAmBX,KAAK,GAAG,CAA3B,EAA8BY,gBAA9B,EAAgD,IAAhD,CAAP;IACD;;IACD,OAAO,IAAP;EACD;;AApCS;;AAuCZ,eAAef,KAAf"},"metadata":{},"sourceType":"module"}