{"ast":null,"code":"class Node {\n  constructor(value) {\n    this.id = `Tile-${value}`;\n    this.value = value; //this.width = 2 * value;\n\n    this.next = null;\n  }\n\n}\n\nclass Stack {\n  constructor(maxLength) {\n    this.top = null;\n    this.maxLength = maxLength;\n    this.length = 0;\n  }\n\n  push(value) {\n    const newNode = new Node(value);\n\n    if (!this.top) {\n      this.top = newNode;\n    } else {\n      newNode.next = this.top; //Apuntamos al elemento que está en la cima\n\n      this.top = newNode;\n    }\n\n    this.length++;\n    return this;\n  }\n\n  peek() {\n    return this.top;\n  }\n\n  pop() {\n    if (this.length > 0) {\n      let topNode = this.top;\n\n      if (topNode === this.maxValue) {}\n\n      this.top = topNode.next;\n      this.length--;\n      return topNode;\n    }\n  }\n\n  traverse() {\n    let list = [];\n    let currentNode = this.top;\n\n    while (currentNode) {\n      list.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return list;\n  }\n\n}\n\nexport default Stack;","map":{"version":3,"names":["Node","constructor","value","id","next","Stack","maxLength","top","length","push","newNode","peek","pop","topNode","maxValue","traverse","list","currentNode"],"sources":["/home/editorial/Descargas/Robert/src/utils/Stack.js"],"sourcesContent":["class Node {\r\n  constructor(value) {\r\n    this.id = `Tile-${value}`;\r\n    this.value = value;\r\n    //this.width = 2 * value;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\nclass Stack {\r\n  constructor(maxLength) {\r\n    this.top = null;\r\n    this.maxLength = maxLength;\r\n    this.length = 0;\r\n  }\r\n  push(value) {\r\n    const newNode = new Node(value);\r\n    if (!this.top) {\r\n      this.top = newNode;      \r\n    } else {\r\n      newNode.next = this.top; //Apuntamos al elemento que está en la cima\r\n      this.top = newNode;\r\n    }\r\n    this.length++;\r\n    return this;\r\n  }\r\n  peek() {\r\n    return this.top\r\n  }\r\n  pop() {\r\n    if (this.length > 0) {\r\n      let topNode = this.top;\r\n      if (topNode === this.maxValue){\r\n        \r\n      }\r\n      this.top = topNode.next;\r\n      this.length--;\r\n      return topNode;\r\n    }\r\n  }\r\n  traverse() {\r\n    let list = [];\r\n    let currentNode = this.top;\r\n    while(currentNode){\r\n      list.push(currentNode);\r\n      currentNode = currentNode.next;\r\n    }\r\n    return list;\r\n  }\r\n}\r\n\r\nexport default Stack;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,MAAMA,IAAN,CAAW;EACTC,WAAW,CAACC,KAAD,EAAQ;IACjB,KAAKC,EAAL,GAAW,QAAOD,KAAM,EAAxB;IACA,KAAKA,KAAL,GAAaA,KAAb,CAFiB,CAGjB;;IACA,KAAKE,IAAL,GAAY,IAAZ;EACD;;AANQ;;AASX,MAAMC,KAAN,CAAY;EACVJ,WAAW,CAACK,SAAD,EAAY;IACrB,KAAKC,GAAL,GAAW,IAAX;IACA,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKE,MAAL,GAAc,CAAd;EACD;;EACDC,IAAI,CAACP,KAAD,EAAQ;IACV,MAAMQ,OAAO,GAAG,IAAIV,IAAJ,CAASE,KAAT,CAAhB;;IACA,IAAI,CAAC,KAAKK,GAAV,EAAe;MACb,KAAKA,GAAL,GAAWG,OAAX;IACD,CAFD,MAEO;MACLA,OAAO,CAACN,IAAR,GAAe,KAAKG,GAApB,CADK,CACoB;;MACzB,KAAKA,GAAL,GAAWG,OAAX;IACD;;IACD,KAAKF,MAAL;IACA,OAAO,IAAP;EACD;;EACDG,IAAI,GAAG;IACL,OAAO,KAAKJ,GAAZ;EACD;;EACDK,GAAG,GAAG;IACJ,IAAI,KAAKJ,MAAL,GAAc,CAAlB,EAAqB;MACnB,IAAIK,OAAO,GAAG,KAAKN,GAAnB;;MACA,IAAIM,OAAO,KAAK,KAAKC,QAArB,EAA8B,CAE7B;;MACD,KAAKP,GAAL,GAAWM,OAAO,CAACT,IAAnB;MACA,KAAKI,MAAL;MACA,OAAOK,OAAP;IACD;EACF;;EACDE,QAAQ,GAAG;IACT,IAAIC,IAAI,GAAG,EAAX;IACA,IAAIC,WAAW,GAAG,KAAKV,GAAvB;;IACA,OAAMU,WAAN,EAAkB;MAChBD,IAAI,CAACP,IAAL,CAAUQ,WAAV;MACAA,WAAW,GAAGA,WAAW,CAACb,IAA1B;IACD;;IACD,OAAOY,IAAP;EACD;;AAvCS;;AA0CZ,eAAeX,KAAf"},"metadata":{},"sourceType":"module"}